/* tslint:disable */
/* eslint-disable */
/**
 * ShipStation API v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreatePackageTypeRequestBody } from '../models';
// @ts-ignore
import type { CreatePackageTypeResponseBody } from '../models';
// @ts-ignore
import type { ErrorResponseBody } from '../models';
// @ts-ignore
import type { GetPackageTypeByIdResponseBody } from '../models';
// @ts-ignore
import type { ListPackageTypesResponseBody } from '../models';
// @ts-ignore
import type { UpdatePackageTypeRequestBody } from '../models';
/**
 * PackageTypesApi - axios parameter creator
 * @export
 */
export const PackageTypesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a custom package type to better assist in getting accurate rate estimates
         * @summary Create custom package type
         * @param {CreatePackageTypeRequestBody} createPackageTypeRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPackageType: async (createPackageTypeRequestBody: CreatePackageTypeRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPackageTypeRequestBody' is not null or undefined
            assertParamExists('createPackageType', 'createPackageTypeRequestBody', createPackageTypeRequestBody)
            const localVarPath = `/v2/packages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_keys required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPackageTypeRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a custom package using the ID
         * @summary Delete a custom package by id
         * @param {string} packageId Package ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePackageTyp: async (packageId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageId' is not null or undefined
            assertParamExists('deletePackageTyp', 'packageId', packageId)
            const localVarPath = `/v2/packages/{package_id}`
                .replace(`{${"package_id"}}`, encodeURIComponent(String(packageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_keys required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Custom Package Type by ID
         * @summary Get custom package type by id
         * @param {string} packageId Package ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPackageTypeById: async (packageId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageId' is not null or undefined
            assertParamExists('getPackageTypeById', 'packageId', packageId)
            const localVarPath = `/v2/packages/{package_id}`
                .replace(`{${"package_id"}}`, encodeURIComponent(String(packageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_keys required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the custom package types associated with the account
         * @summary List custom package types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPackageTypes: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/packages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_keys required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the custom package type object by ID
         * @summary Update custom package type by id
         * @param {string} packageId Package ID
         * @param {UpdatePackageTypeRequestBody} updatePackageTypeRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePackageType: async (packageId: string, updatePackageTypeRequestBody: UpdatePackageTypeRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageId' is not null or undefined
            assertParamExists('updatePackageType', 'packageId', packageId)
            // verify required parameter 'updatePackageTypeRequestBody' is not null or undefined
            assertParamExists('updatePackageType', 'updatePackageTypeRequestBody', updatePackageTypeRequestBody)
            const localVarPath = `/v2/packages/{package_id}`
                .replace(`{${"package_id"}}`, encodeURIComponent(String(packageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_keys required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePackageTypeRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PackageTypesApi - functional programming interface
 * @export
 */
export const PackageTypesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PackageTypesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a custom package type to better assist in getting accurate rate estimates
         * @summary Create custom package type
         * @param {CreatePackageTypeRequestBody} createPackageTypeRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPackageType(createPackageTypeRequestBody: CreatePackageTypeRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatePackageTypeResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPackageType(createPackageTypeRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PackageTypesApi.createPackageType']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a custom package using the ID
         * @summary Delete a custom package by id
         * @param {string} packageId Package ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePackageTyp(packageId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePackageTyp(packageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PackageTypesApi.deletePackageTyp']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Custom Package Type by ID
         * @summary Get custom package type by id
         * @param {string} packageId Package ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPackageTypeById(packageId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPackageTypeByIdResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPackageTypeById(packageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PackageTypesApi.getPackageTypeById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List the custom package types associated with the account
         * @summary List custom package types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPackageTypes(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPackageTypesResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPackageTypes(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PackageTypesApi.listPackageTypes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update the custom package type object by ID
         * @summary Update custom package type by id
         * @param {string} packageId Package ID
         * @param {UpdatePackageTypeRequestBody} updatePackageTypeRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePackageType(packageId: string, updatePackageTypeRequestBody: UpdatePackageTypeRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePackageType(packageId, updatePackageTypeRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PackageTypesApi.updatePackageType']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PackageTypesApi - factory interface
 * @export
 */
export const PackageTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PackageTypesApiFp(configuration)
    return {
        /**
         * Create a custom package type to better assist in getting accurate rate estimates
         * @summary Create custom package type
         * @param {CreatePackageTypeRequestBody} createPackageTypeRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPackageType(createPackageTypeRequestBody: CreatePackageTypeRequestBody, options?: RawAxiosRequestConfig): AxiosPromise<CreatePackageTypeResponseBody> {
            return localVarFp.createPackageType(createPackageTypeRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a custom package using the ID
         * @summary Delete a custom package by id
         * @param {string} packageId Package ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePackageTyp(packageId: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.deletePackageTyp(packageId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Custom Package Type by ID
         * @summary Get custom package type by id
         * @param {string} packageId Package ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPackageTypeById(packageId: string, options?: RawAxiosRequestConfig): AxiosPromise<GetPackageTypeByIdResponseBody> {
            return localVarFp.getPackageTypeById(packageId, options).then((request) => request(axios, basePath));
        },
        /**
         * List the custom package types associated with the account
         * @summary List custom package types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPackageTypes(options?: RawAxiosRequestConfig): AxiosPromise<ListPackageTypesResponseBody> {
            return localVarFp.listPackageTypes(options).then((request) => request(axios, basePath));
        },
        /**
         * Update the custom package type object by ID
         * @summary Update custom package type by id
         * @param {string} packageId Package ID
         * @param {UpdatePackageTypeRequestBody} updatePackageTypeRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePackageType(packageId: string, updatePackageTypeRequestBody: UpdatePackageTypeRequestBody, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.updatePackageType(packageId, updatePackageTypeRequestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PackageTypesApi - object-oriented interface
 * @export
 * @class PackageTypesApi
 * @extends {BaseAPI}
 */
export class PackageTypesApi extends BaseAPI {
    /**
     * Create a custom package type to better assist in getting accurate rate estimates
     * @summary Create custom package type
     * @param {CreatePackageTypeRequestBody} createPackageTypeRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageTypesApi
     */
    public createPackageType(createPackageTypeRequestBody: CreatePackageTypeRequestBody, options?: RawAxiosRequestConfig) {
        return PackageTypesApiFp(this.configuration).createPackageType(createPackageTypeRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a custom package using the ID
     * @summary Delete a custom package by id
     * @param {string} packageId Package ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageTypesApi
     */
    public deletePackageTyp(packageId: string, options?: RawAxiosRequestConfig) {
        return PackageTypesApiFp(this.configuration).deletePackageTyp(packageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Custom Package Type by ID
     * @summary Get custom package type by id
     * @param {string} packageId Package ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageTypesApi
     */
    public getPackageTypeById(packageId: string, options?: RawAxiosRequestConfig) {
        return PackageTypesApiFp(this.configuration).getPackageTypeById(packageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the custom package types associated with the account
     * @summary List custom package types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageTypesApi
     */
    public listPackageTypes(options?: RawAxiosRequestConfig) {
        return PackageTypesApiFp(this.configuration).listPackageTypes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the custom package type object by ID
     * @summary Update custom package type by id
     * @param {string} packageId Package ID
     * @param {UpdatePackageTypeRequestBody} updatePackageTypeRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageTypesApi
     */
    public updatePackageType(packageId: string, updatePackageTypeRequestBody: UpdatePackageTypeRequestBody, options?: RawAxiosRequestConfig) {
        return PackageTypesApiFp(this.configuration).updatePackageType(packageId, updatePackageTypeRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
}

