/* tslint:disable */
/* eslint-disable */
/**
 * ShipStation API v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponseBody } from '../models';
// @ts-ignore
import type { GetCarrierByIdResponseBody } from '../models';
// @ts-ignore
import type { GetCarrierOptionsResponseBody } from '../models';
// @ts-ignore
import type { GetCarriersResponseBody } from '../models';
// @ts-ignore
import type { ListCarrierPackageTypesResponseBody } from '../models';
// @ts-ignore
import type { ListCarrierServicesResponseBody } from '../models';
/**
 * CarriersApi - axios parameter creator
 * @export
 */
export const CarriersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrive details about a specific carrier by its carrier id.
         * @summary Get carrier by id
         * @param {string} carrierId Carrier ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCarrierById: async (carrierId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'carrierId' is not null or undefined
            assertParamExists('getCarrierById', 'carrierId', carrierId)
            const localVarPath = `/v2/carriers/{carrier_id}`
                .replace(`{${"carrier_id"}}`, encodeURIComponent(String(carrierId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_keys required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the options available for a specific carriers.
         * @summary Get carrier options
         * @param {string} carrierId Carrier ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCarrierOptions: async (carrierId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'carrierId' is not null or undefined
            assertParamExists('getCarrierOptions', 'carrierId', carrierId)
            const localVarPath = `/v2/carriers/{carrier_id}/options`
                .replace(`{${"carrier_id"}}`, encodeURIComponent(String(carrierId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_keys required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the package types associated with a specific carrier.
         * @summary List carrier package types
         * @param {string} carrierId Carrier ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCarrierPackageTypes: async (carrierId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'carrierId' is not null or undefined
            assertParamExists('listCarrierPackageTypes', 'carrierId', carrierId)
            const localVarPath = `/v2/carriers/{carrier_id}/packages`
                .replace(`{${"carrier_id"}}`, encodeURIComponent(String(carrierId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_keys required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the services associated with a specific carrier id.
         * @summary List carrier services
         * @param {string} carrierId Carrier ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCarrierServices: async (carrierId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'carrierId' is not null or undefined
            assertParamExists('listCarrierServices', 'carrierId', carrierId)
            const localVarPath = `/v2/carriers/{carrier_id}/services`
                .replace(`{${"carrier_id"}}`, encodeURIComponent(String(carrierId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_keys required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all carriers that have been added to this account.
         * @summary List carriers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCarriers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/carriers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_keys required
            await setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CarriersApi - functional programming interface
 * @export
 */
export const CarriersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CarriersApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrive details about a specific carrier by its carrier id.
         * @summary Get carrier by id
         * @param {string} carrierId Carrier ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCarrierById(carrierId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCarrierByIdResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCarrierById(carrierId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarriersApi.getCarrierById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a list of the options available for a specific carriers.
         * @summary Get carrier options
         * @param {string} carrierId Carrier ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCarrierOptions(carrierId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCarrierOptionsResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCarrierOptions(carrierId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarriersApi.getCarrierOptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List the package types associated with a specific carrier.
         * @summary List carrier package types
         * @param {string} carrierId Carrier ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCarrierPackageTypes(carrierId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCarrierPackageTypesResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCarrierPackageTypes(carrierId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarriersApi.listCarrierPackageTypes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List the services associated with a specific carrier id.
         * @summary List carrier services
         * @param {string} carrierId Carrier ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCarrierServices(carrierId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCarrierServicesResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCarrierServices(carrierId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarriersApi.listCarrierServices']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List all carriers that have been added to this account.
         * @summary List carriers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCarriers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCarriersResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCarriers(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarriersApi.listCarriers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CarriersApi - factory interface
 * @export
 */
export const CarriersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CarriersApiFp(configuration)
    return {
        /**
         * Retrive details about a specific carrier by its carrier id.
         * @summary Get carrier by id
         * @param {string} carrierId Carrier ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCarrierById(carrierId: string, options?: RawAxiosRequestConfig): AxiosPromise<GetCarrierByIdResponseBody> {
            return localVarFp.getCarrierById(carrierId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of the options available for a specific carriers.
         * @summary Get carrier options
         * @param {string} carrierId Carrier ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCarrierOptions(carrierId: string, options?: RawAxiosRequestConfig): AxiosPromise<GetCarrierOptionsResponseBody> {
            return localVarFp.getCarrierOptions(carrierId, options).then((request) => request(axios, basePath));
        },
        /**
         * List the package types associated with a specific carrier.
         * @summary List carrier package types
         * @param {string} carrierId Carrier ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCarrierPackageTypes(carrierId: string, options?: RawAxiosRequestConfig): AxiosPromise<ListCarrierPackageTypesResponseBody> {
            return localVarFp.listCarrierPackageTypes(carrierId, options).then((request) => request(axios, basePath));
        },
        /**
         * List the services associated with a specific carrier id.
         * @summary List carrier services
         * @param {string} carrierId Carrier ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCarrierServices(carrierId: string, options?: RawAxiosRequestConfig): AxiosPromise<ListCarrierServicesResponseBody> {
            return localVarFp.listCarrierServices(carrierId, options).then((request) => request(axios, basePath));
        },
        /**
         * List all carriers that have been added to this account.
         * @summary List carriers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCarriers(options?: RawAxiosRequestConfig): AxiosPromise<GetCarriersResponseBody> {
            return localVarFp.listCarriers(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CarriersApi - object-oriented interface
 * @export
 * @class CarriersApi
 * @extends {BaseAPI}
 */
export class CarriersApi extends BaseAPI {
    /**
     * Retrive details about a specific carrier by its carrier id.
     * @summary Get carrier by id
     * @param {string} carrierId Carrier ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarriersApi
     */
    public getCarrierById(carrierId: string, options?: RawAxiosRequestConfig) {
        return CarriersApiFp(this.configuration).getCarrierById(carrierId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of the options available for a specific carriers.
     * @summary Get carrier options
     * @param {string} carrierId Carrier ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarriersApi
     */
    public getCarrierOptions(carrierId: string, options?: RawAxiosRequestConfig) {
        return CarriersApiFp(this.configuration).getCarrierOptions(carrierId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the package types associated with a specific carrier.
     * @summary List carrier package types
     * @param {string} carrierId Carrier ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarriersApi
     */
    public listCarrierPackageTypes(carrierId: string, options?: RawAxiosRequestConfig) {
        return CarriersApiFp(this.configuration).listCarrierPackageTypes(carrierId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the services associated with a specific carrier id.
     * @summary List carrier services
     * @param {string} carrierId Carrier ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarriersApi
     */
    public listCarrierServices(carrierId: string, options?: RawAxiosRequestConfig) {
        return CarriersApiFp(this.configuration).listCarrierServices(carrierId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all carriers that have been added to this account.
     * @summary List carriers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarriersApi
     */
    public listCarriers(options?: RawAxiosRequestConfig) {
        return CarriersApiFp(this.configuration).listCarriers(options).then((request) => request(this.axios, this.basePath));
    }
}

